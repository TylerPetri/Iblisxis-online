{
  "id": "00000000-0000-0000-0000-000000000000",
  "prevId": "",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.spatial_ref_sys": {
      "name": "spatial_ref_sys",
      "schema": "",
      "columns": {
        "srid": {
          "name": "srid",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "auth_name": {
          "name": "auth_name",
          "type": "varchar(256)",
          "primaryKey": false,
          "notNull": false
        },
        "auth_srid": {
          "name": "auth_srid",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "srtext": {
          "name": "srtext",
          "type": "varchar(2048)",
          "primaryKey": false,
          "notNull": false
        },
        "proj4text": {
          "name": "proj4text",
          "type": "varchar(2048)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {
        "spatial_ref_sys_srid_check": {
          "name": "spatial_ref_sys_srid_check",
          "value": "(srid > 0) AND (srid <= 998999)"
        }
      },
      "policies": {},
      "isRLSEnabled": false
    },
    "public.game_player_ships": {
      "name": "game_player_ships",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "game_id": {
          "name": "game_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "player_id": {
          "name": "player_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "ship_id": {
          "name": "ship_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "line": {
          "name": "line",
          "type": "geometry",
          "primaryKey": false,
          "notNull": true
        },
        "hits": {
          "name": "hits",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        }
      },
      "indexes": {},
      "foreignKeys": {
        "game_player_ships_fk1": {
          "name": "game_player_ships_fk1",
          "tableFrom": "game_player_ships",
          "tableTo": "game_players",
          "schemaTo": "public",
          "columnsFrom": [
            "game_id",
            "player_id"
          ],
          "columnsTo": [
            "game_id",
            "player_id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "game_player_ships_fk2": {
          "name": "game_player_ships_fk2",
          "tableFrom": "game_player_ships",
          "tableTo": "lu_ships",
          "schemaTo": "public",
          "columnsFrom": [
            "ship_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": false
    },
    "public.game_player_shots": {
      "name": "game_player_shots",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "game_id": {
          "name": "game_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "player_id": {
          "name": "player_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "point": {
          "name": "point",
          "type": "geometry",
          "primaryKey": false,
          "notNull": true
        },
        "result": {
          "name": "result",
          "type": "player_shot_result_enum",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "game_player_shots_fk1": {
          "name": "game_player_shots_fk1",
          "tableFrom": "game_player_shots",
          "tableTo": "game_players",
          "schemaTo": "public",
          "columnsFrom": [
            "game_id",
            "player_id"
          ],
          "columnsTo": [
            "game_id",
            "player_id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": false
    },
    "public.lu_ships": {
      "name": "lu_ships",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "ship_name_enum",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "size": {
          "name": "size",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "color": {
          "name": "color",
          "type": "ship_color_enum",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "points": {
          "name": "points",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "lu_ships_name_key": {
          "columns": [
            "name"
          ],
          "nullsNotDistinct": false,
          "name": "lu_ships_name_key"
        },
        "lu_ships_color_key": {
          "columns": [
            "color"
          ],
          "nullsNotDistinct": false,
          "name": "lu_ships_color_key"
        }
      },
      "checkConstraints": {
        "lu_ships_size_check": {
          "name": "lu_ships_size_check",
          "value": "(size <= 5) AND (size >= 2)"
        }
      },
      "policies": {},
      "isRLSEnabled": false
    },
    "public.games": {
      "name": "games",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "winner_player_id": {
          "name": "winner_player_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": false
        },
        "status": {
          "name": "status",
          "type": "game_status_enum",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'ongoing'"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": false
    },
    "public.players": {
      "name": "players",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "password": {
          "name": "password",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "looking_for_game_status": {
          "name": "looking_for_game_status",
          "type": "looking_for_game_status_enum",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'idle'"
        },
        "logged_in": {
          "name": "logged_in",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "user_token": {
          "name": "user_token",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "token_expiration": {
          "name": "token_expiration",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "players_name_key": {
          "columns": [
            "name"
          ],
          "nullsNotDistinct": false,
          "name": "players_name_key"
        },
        "players_email_key": {
          "columns": [
            "email"
          ],
          "nullsNotDistinct": false,
          "name": "players_email_key"
        }
      },
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": false
    },
    "public.game_players": {
      "name": "game_players",
      "schema": "",
      "columns": {
        "game_id": {
          "name": "game_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "player_id": {
          "name": "player_id",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "score": {
          "name": "score",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "player_order": {
          "name": "player_order",
          "type": "player_order_enum",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "game_players_fk0": {
          "name": "game_players_fk0",
          "tableFrom": "game_players",
          "tableTo": "games",
          "schemaTo": "public",
          "columnsFrom": [
            "game_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "game_players_fk1": {
          "name": "game_players_fk1",
          "tableFrom": "game_players",
          "tableTo": "players",
          "schemaTo": "public",
          "columnsFrom": [
            "player_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {
        "game_players_pkey": {
          "name": "game_players_pkey",
          "columns": [
            "game_id",
            "player_id"
          ]
        }
      },
      "uniqueConstraints": {},
      "checkConstraints": {},
      "policies": {},
      "isRLSEnabled": false
    }
  },
  "enums": {
    "public.game_status_enum": {
      "name": "game_status_enum",
      "values": [
        "ongoing",
        "finished"
      ],
      "schema": "public"
    },
    "public.looking_for_game_status_enum": {
      "name": "looking_for_game_status_enum",
      "values": [
        "idle",
        "waiting",
        "playing"
      ],
      "schema": "public"
    },
    "public.player_order_enum": {
      "name": "player_order_enum",
      "values": [
        "player",
        "opponent"
      ],
      "schema": "public"
    },
    "public.player_shot_result_enum": {
      "name": "player_shot_result_enum",
      "values": [
        "miss",
        "hit",
        "sunk",
        "won",
        "ERROR"
      ],
      "schema": "public"
    },
    "public.ship_color_enum": {
      "name": "ship_color_enum",
      "values": [
        "orange",
        "red",
        "grey",
        "green",
        "purple"
      ],
      "schema": "public"
    },
    "public.ship_name_enum": {
      "name": "ship_name_enum",
      "values": [
        "aircraftCarrier",
        "battleship",
        "cruiser",
        "submarine",
        "destroyer"
      ],
      "schema": "public"
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {
    "public.geography_columns": {
      "name": "geography_columns",
      "schema": "public",
      "columns": {
        "f_table_catalog": {
          "name": "f_table_catalog",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "f_table_schema": {
          "name": "f_table_schema",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "f_table_name": {
          "name": "f_table_name",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "f_geography_column": {
          "name": "f_geography_column",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "coord_dimension": {
          "name": "coord_dimension",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "srid": {
          "name": "srid",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "isExisting": false,
      "definition": "SELECT current_database() AS f_table_catalog, n.nspname AS f_table_schema, c.relname AS f_table_name, a.attname AS f_geography_column, postgis_typmod_dims(a.atttypmod) AS coord_dimension, postgis_typmod_srid(a.atttypmod) AS srid, postgis_typmod_type(a.atttypmod) AS type FROM pg_class c, pg_attribute a, pg_type t, pg_namespace n WHERE t.typname = 'geography'::name AND a.attisdropped = false AND a.atttypid = t.oid AND a.attrelid = c.oid AND c.relnamespace = n.oid AND (c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'm'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND NOT pg_is_other_temp_schema(c.relnamespace) AND has_table_privilege(c.oid, 'SELECT'::text)",
      "materialized": false
    },
    "public.geometry_columns": {
      "name": "geometry_columns",
      "schema": "public",
      "columns": {
        "f_table_catalog": {
          "name": "f_table_catalog",
          "type": "varchar(256)",
          "primaryKey": false,
          "notNull": false
        },
        "f_table_schema": {
          "name": "f_table_schema",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "f_table_name": {
          "name": "f_table_name",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "f_geometry_column": {
          "name": "f_geometry_column",
          "type": "name",
          "primaryKey": false,
          "notNull": false
        },
        "coord_dimension": {
          "name": "coord_dimension",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "srid": {
          "name": "srid",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "varchar(30)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "isExisting": false,
      "definition": "SELECT current_database()::character varying(256) AS f_table_catalog, n.nspname AS f_table_schema, c.relname AS f_table_name, a.attname AS f_geometry_column, COALESCE(postgis_typmod_dims(a.atttypmod), sn.ndims, 2) AS coord_dimension, COALESCE(NULLIF(postgis_typmod_srid(a.atttypmod), 0), sr.srid, 0) AS srid, replace(replace(COALESCE(NULLIF(upper(postgis_typmod_type(a.atttypmod)), 'GEOMETRY'::text), st.type, 'GEOMETRY'::text), 'ZM'::text, ''::text), 'Z'::text, ''::text)::character varying(30) AS type FROM pg_class c JOIN pg_attribute a ON a.attrelid = c.oid AND NOT a.attisdropped JOIN pg_namespace n ON c.relnamespace = n.oid JOIN pg_type t ON a.atttypid = t.oid LEFT JOIN ( SELECT s.connamespace, s.conrelid, s.conkey, replace(split_part(s.consrc, ''''::text, 2), ')'::text, ''::text) AS type FROM ( SELECT pg_constraint.connamespace, pg_constraint.conrelid, pg_constraint.conkey, pg_get_constraintdef(pg_constraint.oid) AS consrc FROM pg_constraint) s WHERE s.consrc ~~* '%geometrytype(% = %'::text) st ON st.connamespace = n.oid AND st.conrelid = c.oid AND (a.attnum = ANY (st.conkey)) LEFT JOIN ( SELECT s.connamespace, s.conrelid, s.conkey, replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text)::integer AS ndims FROM ( SELECT pg_constraint.connamespace, pg_constraint.conrelid, pg_constraint.conkey, pg_get_constraintdef(pg_constraint.oid) AS consrc FROM pg_constraint) s WHERE s.consrc ~~* '%ndims(% = %'::text) sn ON sn.connamespace = n.oid AND sn.conrelid = c.oid AND (a.attnum = ANY (sn.conkey)) LEFT JOIN ( SELECT s.connamespace, s.conrelid, s.conkey, replace(replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text), '('::text, ''::text)::integer AS srid FROM ( SELECT pg_constraint.connamespace, pg_constraint.conrelid, pg_constraint.conkey, pg_get_constraintdef(pg_constraint.oid) AS consrc FROM pg_constraint) s WHERE s.consrc ~~* '%srid(% = %'::text) sr ON sr.connamespace = n.oid AND sr.conrelid = c.oid AND (a.attnum = ANY (sr.conkey)) WHERE (c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'm'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND NOT c.relname = 'raster_columns'::name AND t.typname = 'geometry'::name AND NOT pg_is_other_temp_schema(c.relnamespace) AND has_table_privilege(c.oid, 'SELECT'::text)",
      "materialized": false
    }
  },
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "tables": {}
  }
}